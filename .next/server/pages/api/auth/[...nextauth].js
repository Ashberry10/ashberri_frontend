"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/auth/[...nextauth]";
exports.ids = ["pages/api/auth/[...nextauth]"];
exports.modules = {

/***/ "next-auth":
/*!****************************!*\
  !*** external "next-auth" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("next-auth");

/***/ }),

/***/ "next-auth/providers/credentials":
/*!**************************************************!*\
  !*** external "next-auth/providers/credentials" ***!
  \**************************************************/
/***/ ((module) => {

module.exports = require("next-auth/providers/credentials");

/***/ }),

/***/ "(api)/./pages/api/auth/[...nextauth].ts":
/*!*****************************************!*\
  !*** ./pages/api/auth/[...nextauth].ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"authOptions\": () => (/* binding */ authOptions),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth/providers/credentials */ \"next-auth/providers/credentials\");\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth */ \"next-auth\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_1__);\n// import CredentialsProvider from \"next-auth/providers/credentials\";\n// import {signOut}  from 'next-auth/react';\n// import NextAuth,{NextAuthOptions} from \"next-auth\"\n// export const authOptions:NextAuthOptions = {\n//    secret: process.env.AUTH_SECRET,\n//     providers:[\n//         // ..add more prodiver\n//         CredentialsProvider({\n//           // The Username to display on the sign in form (e.g. \"Sign in with...\")\n//           name: \"Credentials\",\n//           // `credentials` is used to generate a form on the sign in page.\n//             // You can specify which fields should be submitted, by adding keys to the `credentials` object.\n//             // e.g. domain, userUsername, password, 2FA token, etc.\n//             // You can pass any HTML attribute to the <input> tag through the object.\n//             credentials: {\n//               // Username: { label: \"Username\", type: \"text\", placeholder: \"jsmith\" },\n//               email: { label: \"email\", type: \"email\", placeholder: \"jsmith@gmail.com\" },\n//               password: { label: \"Password\", type: \"password\" }\n//             },\n//             async authorize(credentials, req) {\n//               // Add logic here to look up the user from the credentials supplied\n//             //   const user = { id: \"1\", Username: \"J Smith\", email: \"jsmith@example.com\" }\n//             //   if (user) {\n//             //     // Any object returned will be saved in `user` property of the JWT\n//             //     return user\n//             //   } else {\n//             //     // If you return null then an error will be displayed advising the user to check their details.\n//             //     return null\n//             //     // You can also Reject this callback with an Error thus the user will be sent to the error page with the error message as a query parameter\n//             //   }\n//                  const {email,password } = credentials as any;\n//                  const res = await fetch('http://127.0.0.1:8000/api/user/login/',{\n//                   method:\"POST\",\n//                   headers:{\n//                     \"Content-Type\":\"application/json\"\n//                 },\n//                 body:JSON.stringify({\n//                   // Username,\n//                   email,\n//                   password,\n//                 })\n//             })\n//             const user = await res.json();\n//             // console.log({user});\n//             if (res.ok && user) {\n//               return user;\n//             } else{\n//             return null;\n//             }\n//           },\n//         }),\n//       ],\n//         // session:{\n//         //     strategy:\"jwt\"\n//         // },\n//         callbacks: {\n//           async jwt({ token, user }) {\n//             return { ...token, ...user };\n//           },\n//           async session({ session, token, user }) {\n//             session.user = token as any;\n//             return session;\n//           },\n//         },\n//         pages:{\n//             signIn:\"/Login\",\n//             signOut:\"/Login\"\n//       },\n//       };\n// export default NextAuth(authOptions)\n\n\nconst authOptions = {\n    secret: process.env.AUTH_SECRET,\n    providers: [\n        // ..add more prodiver\n        next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_0___default()({\n            // The Username to display on the sign in form (e.g. \"Sign in with...\")\n            name: \"Credentials\",\n            // `credentials` is used to generate a form on the sign in page.\n            // You can specify which fields should be submitted, by adding keys to the `credentials` object.\n            // e.g. domain, userUsername, password, 2FA token, etc.\n            // You can pass any HTML attribute to the <input> tag through the object.\n            credentials: {\n                // Username: { label: \"Username\", type: \"text\", placeholder: \"jsmith\" },\n                email: {\n                    label: \"email\",\n                    type: \"email\",\n                    placeholder: \"jsmith@gmail.com\"\n                },\n                password: {\n                    label: \"Password\",\n                    type: \"password\"\n                }\n            },\n            async authorize (credentials, req) {\n                // Add logic here to look up the user from the credentials supplied\n                //   const user = { id: \"1\", Username: \"J Smith\", email: \"jsmith@example.com\" }\n                //   if (user) {\n                //     // Any object returned will be saved in `user` property of the JWT\n                //     return user\n                //   } else {\n                //     // If you return null then an error will be displayed advising the user to check their details.\n                //     return null\n                //     // You can also Reject this callback with an Error thus the user will be sent to the error page with the error message as a query parameter\n                //   }\n                const { email , password  } = credentials;\n                const res = await fetch(\"http://127.0.0.1:8000/api/user/login/\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        // Username,\n                        email,\n                        password\n                    })\n                });\n                const user = await res.json();\n                // console.log({user});\n                if (res.ok && user) {\n                    return user;\n                } else {\n                    return null;\n                }\n            }\n        })\n    ],\n    // session:{\n    //     strategy:\"jwt\"\n    // },\n    callbacks: {\n        async jwt ({ token , user  }) {\n            return {\n                ...token,\n                ...user\n            };\n        },\n        async session ({ session , token , user  }) {\n            session.user = token;\n            return session;\n        }\n    },\n    pages: {\n        signIn: \"/Login\",\n        signOut: \"/\"\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (next_auth__WEBPACK_IMPORTED_MODULE_1___default()(authOptions));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/auth/[...nextauth].ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/auth/[...nextauth].ts"));
module.exports = __webpack_exports__;

})();